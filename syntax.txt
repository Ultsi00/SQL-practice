https://www.sql-practice.com/

******************************
WHERE
******************************
=condition

!! cannot be used with any aggregate functions (sum, count, min, max, avg)
on same line.

!! order:
    SELECT
    FROM 
    WHERE 
    GROUP 
    HAVING

******************************
IN / NOT IN (!! in WHERE clause)
******************************
The IN operator allows you to specify multiple values in a WHERE clause.
The IN operator is a shorthand for multiple OR conditions.
Note: NOT IN excludes the values 

    SELECT column_name(s)
    FROM table_name
    WHERE column_name IN (value1, value2, ...);

    or

    SELECT column_name(s)
    FROM table_name
    WHERE column_name IN (SELECT STATEMENT);

Example: select all patients, whose province_id is either "SK", "AB" or "MB":
    SELECT * FROM patients
    WHERE province_id IN ('SK', 'AB', 'MB');

Example: select all patients, who have the same first_name as a doctor.

    SELECT * FROM patients 
    WHERE first_name in (SELECT first_name FROM doctors)

******************************
SELECT
******************************
Here, column1, column2, ... are the field names of the table you want to select data from. 

    SELECT column1, column2, ...
        FROM tablename;

If you want to select all the fields available in the table, use the following syntax:

    SELECT * FROM tablename;

SELECT Column Example:
The following SQL statement selects the "first_name" and "last_name" columns from the 
"patients" table:

    SELECT first_name, last_name FROM patients;

SELECT * Example:
The following SQL statement selects all the columns from the "patients" table:

    SELECT * FROM patients;

******************************
UPDATE
******************************
    UPDATE tablename
        SET column1 = value1, column2 = value2, ...
        WHERE condition;

Note: Be sure to specify the where clause. Failing to include the where 
clause will result in all of the rows to be updated!

The following SQL statement updates the first patient (patient_id = 1) with a new first_name and a new weight.

    UPDATE patients
    SET
    first_name = 'John',
    weight = 120
    WHERE patient_id = 1;
    â€‹
The following SQL statement will update the allergies to 'NKA' (no known allergies) for all records where allergies is NULL
    UPDATE patients
    SET allergies = 'NKA'
    WHERE allergies is NULL;

******************************
CONCATENATE
******************************
CONCAT(expression1, expression2, expression3,...)

The following SQL statement concats the first_name and last_name of each patient together:

    SELECT CONCAT(first_name,' ', last_name) AS full_name
    FROM patients;

******************************
JOIN
******************************
    SELECT column_name(s)
    FROM table1
    JOIN table2
    ON table1.column_name = table2.column_name;

For example, table1 = ['id' : '1', 'name' : 'mark], table2 = ['id' : '1', 'trade' : 'carpenter]
    SELECT name, trade
    FROM table1
    JOIN table2
    ON table1.id = table2.id;

>>  mark    |   carpenter

******************************
COUNT
******************************
    SELECT COUNT(column_name)
        FROM table_name
        WHERE condition;
        
The following SQL statement finds the number of patients that weight over 120Kg:

    SELECT COUNT(*) FROM patients 
        WHERE weight > 120;

******************************
DISTINCT
******************************
The SELECT DISTINCT statement is used to return only distinct (different) values.
Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

    SELECT DISTINCT column1, column2, ...
        FROM table_name;

To count distinct variable values:
    SELECT COUNT(DISTINCT first_name) 
        FROM patients;

******************************
ORDER BY
******************************
The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

    SELECT column1, column2, ...
        FROM table_name
        ORDER BY column1, column2, ... ASC|DESC;

The following SQL statement selects all patients from the "patients" table, 
sorted ascending by the "first_name" and descending by the "last_name" column:

    SELECT * FROM patients
        ORDER BY first_name ASC, last_name DESC;

******************************
GROUP BY
******************************
The GROUP BY statement groups rows that have the same values into summary rows, 
The statement is often used with aggregate functions (COUNT(), MAX(), MIN(), SUM(), AVG()),
to group the result-set by one or more columns.

    SELECT column_name(s)
        FROM table_name
        WHERE condition
        GROUP BY column_name(s)

******************************
HAVING
******************************
!! HAVING requires GROUP BY.

The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
The following SQL statement lists the names of patients with a common first_name (> 30 occurances):

    SELECT COUNT(*), first_name
        FROM patients
        GROUP BY first_name
        HAVING COUNT(*) > 30;

******************************
UNION
******************************
The UNION operator is used to combine the result-set of two or more SELECT statements.

- Every SELECT statement within UNION must have the same number of columns

- The columns must also have similar data types

- The columns in every SELECT statement must also be in the same order

UNION Syntax
SELECT column_name(s) FROM table1
    UNION
SELECT column_name(s) FROM table2;
UNION ALL Syntax
The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

SELECT column_name(s) FROM table1
    UNION ALL
SELECT column_name(s) FROM table2;
Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.

******************************
LIKE
******************************

    SELECT column1, column2, ...
    FROM table_name
    WHERE column LIKE pattern;

                Pattern:    Output:
    ... LIKE    'a%'	    values, which start with "a"
    ... LIKE    '%a'	    values, which end in "a"
    ... LIKE    '%xyz%'	    values, which have "xzy" in any position
    ... LIKE    '_r%'	    values, which have "r" in the second position
    ... LIKE    'a_%'	    values, which start with "a" and are at least 2 characters in length

******************************

******************************